# _ProsodyPro (= _TimeNormalizeF0.praat)
# Version 3.5
# Last update: 9 Feb, 2012
# Written by:   Yi Xu; all rights reserved.
# Report any bugs to Yi Xu (yi.xu@ucl.ac.uk)

# Find more information at http://www.phon.ucl.ac.uk/home/yi/ProsodyPro/

# SYNOPSIS: 
# 1) Automatically open each .wav file in a folder, manually label intervals and rectify 
# vocal pulse markings; 
# 2) Save automatically trimmed (smoothed) f0 contours; 
# 3) Save time-normalized f0; 
# 4) Save time-normalized f0 with actual time; 
# 5) Save manually rectified, trimmed f0 as PitchTier objects which can replace the pitch 
# tier in Manipulation objects; 
# 6) Save sampled f0; 
# 7) Save f0 velocity; 
# 8) Save maxf0, minf0, excursionsize, mean f0, intensity, duration, peak velocity, final velocity and final f0 of labeled intervals;
# 9) Save results into ensemble files.

# INSTRUCTIONS:

# 1. Put all the (or a group of) sound files to be analyzed in a single folder together with 
# this script, and launch Praat;

# 2. Select Open Praat Script... from the top menu;

# 3. Locate this script in the dialogue window and select it;

# 4. When the script window opens in Praat, select Run from the Run menu (or type the key 
# shortcut command-r or control-r);

# 5. When a dialogue window opens, check or uncheck the boxes according to your analysis needs, 
# and set appropriate values in the text fields or simply use the default values.

# 6. Click OK and three windows will appear. The first big window displays the waveform together 
# with vocal cycle marks (vertical lines) generated by Praat. This is where you can manually 
# make sure the F0 tracking is accurate by adding marks to those vocal cycles missed by Praat 
# and deleting any redundant marks. But you need to do so only for the named intervals, as 
# explained next.

# 7. The second big window displays the waveform and spectrogram of the current sound together 
# with optional pitch track and formant tracks in the spectrogram panel, and vocal pulse marks 
# in the waveform panel. (These tracks and marks cannot be manually changed. So you can hide 
# them to reduce processing time by using the corresponding menu.) At the bottom of this window 
# are two TextGrids, where you can insert interval boundaries (upper grid) and point labels 
# (lower grid). Most importantly, for any interval that you want to have analysis results saved, 
# you need to type a name. Make the name as simple as possible to save time, e.g., a, b, or 1, 2.

# 8. When you are done with manual correction and labeling, activate the third, small window.
# Click "Continue" there and two new big windows will appear, displaying the spectrogram, 
# waveform and vocal cycle marks of the next sound file in the folder. You can repeat this 
# process until all the sound files in the folder are processed. Or you can finish at any point  
# by clicking the "Finish" button in the small window (Do not press the stop button! You will lose
# the changes to the current file and see some unpleasant messages!) Please remember to note down 
# the current file number in pop_up window so that
# you know where to start when you want to continue the labeling next time.

# 9. New! If you want to jump to any file, just replace the current number in the small
# window with the new file number minus one. For example, if you want to jump to file 1, enter 0.

# 10. Each time you press the "Continue" button in the small window, various analysis results 
# are saved for the current sound into individual text files as described below. If, however,
# you want to change certain analysis parameters after processing all the sound files, you
# can rerun the script, set the "Input File No" to 1 in the initial Dialogue window and uncheck
# the "Pause between sound files" button before pressing "OK". The script will then run by 
# itself and cycle through all the sound files in the folder one by one. Just watch the action 
# with amusement.

# 10. The following files will be saved as each sound file is processed:  

# 	.f0 -- trimmed f0 with real time.

# 	.rawf0 -- raw with real time computed directly from the pulse markings.

# 	.timenormf0 -- time-normalized f0. The f0 in each interval is divided 
# 	into the same number of points (default = 10). Thus points 1-10 belong to interval 1, and 
# 	points 11-20 belong to interval 2, etc.

# 	.actutimenormf0 -- time-normalized f0 with each interval divided into the same number
# 	of points (default = 10). But the time scale is the original, except
# 	that the onset time of interval 1 is set to 0, unless the "Set initial time to 0" box in 
# 	the initial dialogue window is unchecked.  

# 	.samplef0 -- f0 values at fixed time intervals specified by "f0 sample rate".    

# 	.f0velocity -- velocity profile (instantaneous rates of F0 change) of f0 contour in 
# 	semitone/s at fixed time intervals specified by "f0 sample rate".

# 	.means -- containing various measurements, including maxf0, minf0, excursion size,  
# 	mean intensity, duration, max_velocity, final_velocity. Final velocity is taken at a point
#   earlier than the interval offset by time specified by "Final offset" in the 
#   startup dialogue window. It is an indicator of the slope of the underlying target of the interval.
#	Final f0 is is an indicator of the height of the underlying target, taken also at a point
#   specified by "Final offset" in the startup dialogue window.

# 11. The values in these files correspond only to the named intervals, i.e., those with 
# text names. No values are saved for the blank intervals.

# 12. The .f0, .timenormf0, and .actutimenormf0 files can be opened by a graphing program 
# such as Excel. The left-hand column is time and the right-hand column f0.

# 13. The .means file contains values of maxf0, minf0, excursionsize, meanf0, mean intensity, duration and 
# peak velocity (if "Get sample f0 box" has been checked when processing individual files) of 
# all named intervals.

# 14. After the analysis of all the individual sound files are done, you can gather the analysis 
# results into a number of ensemble files by running the script again and checking the "Get 
# ensemble results" button in the initial dialogue window. The following ensemble files are saved:

# 		1)	normf0.txt
# 		2)	normIntensity.txt
# 		3)	normactutime.txt
# 		4)	samplef0.txt
# 		5)	f0velocity.txt
# 		6)	maxf0.txt
# 		7)	minf0.txt
# 		8)	excursionsize.txt
# 		9)	meanf0.txt
# 		10)	duration.txt
# 		11)	maxvelocity.txt
# 		12)	finalvelocity.txt
# 		13)	finalf0.txt
# 		14)	meanintensity.txt

# 15. Note that you can generate an ensemble file only if you have saved at least one  
# corresponding individual analysis file described earlier.


form Start
	integer Input_File_No 1
	word TextGrid_extension .label
	choice Task: 1
		button Interactive labeling
		button Process all sounds without pause
		button Get emsemble files
	comment F0 analysis options:	
		integer left_F0_range_(Hz) 30
		integer right_F0_range_(Hz) 400
		integer Npoints_per_interval 10
		integer F0_sample_rate_(Hz) 100
		real Perturbation_length_(s) 0
		real Final_offset_(s) -0.03
	boolean Get_f0_velocity 0
	boolean Save_output_files 1
		boolean Set_initial_normalized_time_to_0 1
endform

if (praatVersion < 5107)
	printline Requires Praat version 5.1.07 or higher. Please upgrade your Praat version 
	exit
endif

npoints = npoints_per_interval
min_f0 = left_F0_range
max_f0 = right_F0_range

directory$ = "./"
Create Strings as file list... list 'directory$'*.wav
numberOfFiles = Get number of strings
if !numberOfFiles
	Create Strings as file list... list 'directory$'*.WAV
	numberOfFiles = Get number of strings
endif
if !numberOfFiles
	exit There are no sound files in the folder!
else
	Write to raw text file... 'directory$'FileList.txt
endif
hasmeanstitle = 0
hasnormf0 = 0
hasnormactutime = 0
hassamplef0 = 0
hasf0velocity = 0
hasnormIntensity = 0
number = input_File_No
for current_file from input_File_No to numberOfFiles
	select Strings list
	fileName$ = Get string... current_file
	name$ = fileName$ - ".wav" - ".WAV"
	if task == 3
		call All_means 'name$'
		call All_normf0 'name$'
		if get_f0_velocity and fileReadable(directory$+name$+".samplef0")
			call All_samplef0 'name$'
			call All_f0velocity 'name$'
		endif
	else
		call Labeling 'fileName$'
	endif
endfor

if task == 3
	echo Ensemble files saved:
	printline 1)	normf0.txt
	printline 2)	normIntensity.txt
	printline 3)	normactutime.txt
	printline 4)	maxf0.txt
	printline 5)	minf0.txt
	printline 6)	excursionsize.txt
	printline 7)	meanf0.txt
	printline 8)	duration.txt
	printline 9)	maxvelocity.txt
	printline 10)	finalvelocity.txt
	printline 11)	finalf0.txt
	printline 12)	meanintensity.txt
	if get_f0_velocity
		printline 13)	samplef0.txt
		printline 14)	f0velocity.txt
	endif
endif

procedure Labeling file_name$ file_extension$
	Read from file... 'directory$''file_name$'
	name$ = file_name$ - ".wav" - ".WAV"
	labelfile$ = name$+"'TextGrid_extension$'"
	if fileReadable (labelfile$)
		Read from file... 'directory$''name$''TextGrid_extension$'
	else
		To TextGrid... "interval point" point
	endif
	plus Sound 'name$'
	Edit
	
	pulsefile$ = name$+".pulse"
	if fileReadable (pulsefile$)
		Read from file... 'directory$''name$'.pulse
	else
		select Sound 'name$'
		To PointProcess (periodic, cc)... min_f0 max_f0
		Rename... 'name$'
	endif
	plus Sound 'name$'
	Edit
	
	call Save 'directory$' 'name$'
	select Sound 'name$'
	Remove
	if task == 1
		if finished = 1
			echo Current file number is 'current_file'.
			exit
		endif
	endif
endproc

procedure Save directory$ name$
	if task == 1
		beginPause ("Press Finish to exit")
			comment ("The next file will be current_file + 1")
			integer ("current_file", 'current_file')
		finished = endPause ("Finish", "Continue", 2)
	endif
	
	select PointProcess 'name$'
	if save_output_files
		npulses = Get number of points
		for n from 2 to npulses
			time1 = Get time from index... n-1
			time2 = Get time from index... n
			if time2 = time1
				Remove point... n
			endif
		endfor
		Write to short text file... 'directory$''name$'.pulse
		maxperiod = 1/min_f0
		To PitchTier... maxperiod
		if npulses > 1
			Down to TableOfReal... Hertz
			Write to headerless spreadsheet file... 'directory$''name$'.rawf0
			Remove
		else
			printline Please add at least 3 pulse marks before proceeding!
		endif
		select PitchTier 'name$'
		call Trimf0
		Write to short text file... 'directory$''name$'.PitchTier
		Down to TableOfReal... Hertz
		Write to headerless spreadsheet file... 'directory$''name$'.f0
		Remove
	
		if get_f0_velocity
			call Sampling
			call Differentiation
#			call Smooth "velocity" "smooth_velocity" 0.05 * f0_sample_rate
			if found_interval
				select TableOfReal samplef0
				Write to headerless spreadsheet file... 'directory$''name$'.samplef0
				Remove
				select TableOfReal velocity
				Write to headerless spreadsheet file... 'directory$''name$'.f0velocity
				plus PitchTier smoothf0
				Remove
			endif
		endif 

		call Normalization
		if found_interval
			select TableOfReal normf0
			Write to headerless spreadsheet file... 'directory$''name$'.timenormf0
			select TableOfReal normactuf0
			Write to headerless spreadsheet file... 'directory$''name$'.actutimenormf0
			select TableOfReal normIntensity
			Write to headerless spreadsheet file... 'directory$''name$'.timenormIntensity
		endif
		plus PointProcess 'name$'
		plus TableOfReal normf0
		plus TableOfReal normactuf0
		Remove
		
		call Means
		if get_f0_velocity
			select PitchTier semitonef0
#			plus PitchTier smooth_velocity
			Remove
		endif

		select TableOfReal means
		Write to headerless spreadsheet file... 'directory$''name$'.means
		plus Intensity 'name$'
		Remove
		select PitchTier 'name$'
		if get_f0_velocity
			plus PitchTier velocity
		endif
		Remove
	else
		select TextGrid 'name$'
		plus PointProcess 'name$'
		Remove
	endif
	
	select TextGrid 'name$'
	Write to short text file... 'directory$''name$''TextGrid_extension$'
	Remove
endproc

procedure Trimf0
	maxbump = 0.01
	maxedge = 0.0
	maxgap = 0.033
	n = Get number of points
	
	first = Get value at index... 1
	second = Get value at index... 2
	penult = Get value at index... n-1
	last = Get value at index... n
	tfirst = Get time from index... 1
	if npulses < 3
		printline Please add at least 3 pulse marks before proceeding!
		exit
	endif
	tlast = Get time from index... n
	for k from 1 to 3
		call Trim
	endfor
	Remove point... 1
	Add point... tfirst second + (first-second) / 1000
	Remove point... n
	Add point... tlast penult + (last-penult) / 1000
endproc

procedure Trim
	for i from 2 to n-1
		tleft = Get time from index... i-1
		tmid = Get time from index... i
		tright = Get time from index... i+1
		gap1 = tmid - tleft
		gap2 = tright - tmid
		left = Get value at index... i-1
		mid = Get value at index... i
		right = Get value at index... i+1
		diff1 = mid - left
		diff2 = mid - right
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left + maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right + maxbump
		endif

		diff1 = left - mid
		diff2 = right - mid
		if diff1 > maxbump and diff2 > maxedge and gap1 < maxgap and gap2 < maxgap
		... or diff2 > maxbump and diff1 > maxedge and gap1 < maxgap and gap2 < maxgap
			Remove point... i
			Add point... tmid left+(tmid-tleft)/(tright-tleft)*(right-left)
		endif
		if diff1 > maxbump and gap2 >= maxgap
			Remove point... i
			Add point... tmid left - maxbump
		endif
		if diff2 > maxbump and gap1 >= maxgap
			Remove point... i
			Add point... tmid right - maxbump
		endif
	endfor
endproc

procedure Normalization
	select PitchTier 'name$'
	lasttime = Get finishing time
	Create TableOfReal... normf0 1 2
	Set column label (index)... 1 NormalizedTime
	Set column label (index)... 2 F0
	Create TableOfReal... normactuf0 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 F0

	Create TableOfReal... normIntensity 1 2
	Set column label (index)... 1 ActualTime
	Set column label (index)... 2 Intensity
	select Sound 'name$'
	To Intensity... 100 0 yes
	
	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	interval = 0
	found_interval = 0
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			select PitchTier 'name$'
			index1 = Get high index from time... start1
			index2 = Get low index from time... end
			if found_interval = 0
				found_interval = 1
				select PitchTier 'name$'
				firstime = start1
			endif
			call Normalize
			call Normalize_Intensity
			interval = interval + 1
		endif
	endfor
	select TableOfReal normf0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select TableOfReal normactuf0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select TableOfReal normIntensity
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
	select Intensity 'name$'
	Remove
endproc

procedure Normalize
	duration = end - start1

	for x from 0 to npoints-1
		normtime = start1 + duration * x / npoints
		select PitchTier 'name$'
		f0 = Get value at time... normtime
		select TableOfReal normf0
		nrows = Get number of rows
		Set value... nrows 1 1+x+interval*npoints
		Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1
		select TableOfReal normactuf0
		nrows = Get number of rows
		Set value... nrows 1 normtime
		if set_initial_normalized_time_to_0
			Set value... nrows 1 normtime-firstime
		endif
		Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1
	endfor
endproc

procedure Normalize_Intensity
	duration = end - start1
	for x from 0 to npoints-1
		normtime = start1 + duration * x / npoints
		select Intensity 'name$'
		intensity = Get value at time... normtime Cubic
		select TableOfReal normIntensity
		nrows = Get number of rows
		Set value... nrows 1 normtime*duration+start1
		if set_initial_normalized_time_to_0
			Set value... nrows 1 normtime*duration+start1-firstime
		endif
		Set value... nrows 2 intensity
			new_label$ = replace$(label$, " ", "_", 0)
		Set row label (index)... nrows 'new_label$'
		Insert row (index)... nrows + 1
	endfor
endproc

procedure Sampling
	select PitchTier 'name$'
	Create TableOfReal... samplef0 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 F0

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	found_interval = 0
	nrows = 0
	sampleStart = Get starting point... 1 1
	sampleEnd = Get end point... 1 nintervals
	Create PitchTier... samplef0 sampleStart sampleEnd
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			duration = end - start1
			if found_interval = 0
				found_interval = 1
			endif

			select PitchTier 'name$'
			nsamples = duration * f0_sample_rate + 1
			for x from 0 to nsamples - 1
				select PitchTier 'name$'
				sample_time = start1 + x/f0_sample_rate
				f0 = Get value at time... sample_time
				select PitchTier samplef0
				Add point... sample_time f0
				select TableOfReal samplef0
				nrows = Get number of rows
				Set value... nrows 1 sample_time
				Set value... nrows 2 f0
			new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal samplef0
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
endproc

procedure Differentiation
	select PitchTier samplef0
	Rename... semitonef0
	Formula... 12 * ln (self) / ln(2); semitone
	Down to TableOfReal... Hertz
	Set column label (index)... 1 time
	Set column label (index)... 2 f0 (st)
	Write to headerless spreadsheet file... 'directory$''name$'.semitonef0
	Remove
	call Smooth "semitonef0" "smoothf0" 0.05 * f0_sample_rate
	Create PitchTier... velocity sampleStart sampleEnd
	Create TableOfReal... velocity 1 2
	Set column label (index)... 1 SampleTime
	Set column label (index)... 2 Velocity(semitone/s)
	
	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	nrows = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			start1 = Get starting point... 1 m
			end = Get end point... 1 m
			select PitchTier smoothf0
			index_first = Get high index from time... start1
			index_last = Get low index from time... end
			for x from index_first to index_last - 1
				if x = index_first or x = index_last - 1
					x2 = x + 1
				else
					x2 = x + 2
				endif
				select PitchTier smoothf0
				f01 = Get value at index... x
				f02 = Get value at index... x2
				sampletime1 = Get time from index... x
				sampletime2 = Get time from index... x2
				velocity = (f02 - f01) / (sampletime2 - sampletime1)
				velocity_time = 0.5 * (sampletime1 + sampletime2)
				select PitchTier velocity
				Add point... velocity_time velocity
				select TableOfReal velocity
				nrows = Get number of rows
				Set value... nrows 1 velocity_time
				Set value... nrows 2 velocity
			new_label$ = replace$(label$, " ", "_", 0)
				Set row label (index)... nrows 'new_label$'
				Insert row (index)... nrows + 1
			endfor
		endif
	endfor
	select TableOfReal velocity
	if nrows > 1
		Remove row (index)... nrows + 1
	endif
endproc

procedure Means
	select Sound 'name$'
	To Intensity... 100 0 yes

	select TextGrid 'name$'
	nintervals = Get number of intervals... 1
	Create TableOfReal... means 1 9
	Set column label (index)... 1 maxf0
	Set column label (index)... 2 minf0
	Set column label (index)... 3 excursion_size
	Set column label (index)... 4 meanf0
	Set column label (index)... 5 finalf0
	Set column label (index)... 6 mean_intensity
	Set column label (index)... 7 duration
	Set column label (index)... 8 max_velocity
	Set column label (index)... 9 final_velocity
	interval = 0
	for m from 1 to nintervals
		select TextGrid 'name$'
		label$ = Get label of interval... 1 m
		if not label$ = ""
			interval = interval + 1
			start = Get starting point... 1 m
			start1 = start + perturbation_length
			end = Get end point... 1 m
			duration = 1000 * (end - start1)
			select TableOfReal means
			new_label$ = replace$(label$, " ", "_", 0)
			Set row label (index)... interval 'new_label$'
			select PitchTier 'name$'
			meanf0 = Get mean (points)... start1 end
			early_end = end + final_offset
			finalf0 = Get value at time... early_end
			To Pitch... 0.02 30 600
			maxf0 = Get maximum... start1 end Hertz Parabolic
			minf0 = Get minimum... start1 end Hertz Parabolic
			excursionsize = hertzToSemitones(maxf0) - hertzToSemitones(minf0)
			Remove
			select Intensity 'name$'
			intensity = Get mean... start1 end energy
			if get_f0_velocity
				select PitchTier velocity
				final_velocity = Get value at time... early_end
				
				select PitchTier velocity
				index_first = Get high index from time... start1
				index_last = Get low index from time... end
				maxvelocity = 0
				for x from index_first to index_last
					v = Get value at index... x
					if abs(v) > abs(maxvelocity)
						maxvelocity = v
					endif
				endfor
			endif
			select TableOfReal means
			Set value... interval 1 maxf0
			Set value... interval 2 minf0
			Set value... interval 3 excursionsize
			Set value... interval 4 meanf0
			Set value... interval 5 finalf0
			Set value... interval 6 intensity
			Set value... interval 7 duration
			if get_f0_velocity
				Set value... interval 8 maxvelocity
				Set value... interval 9 final_velocity
			endif			
			Insert row (index)... interval + 1
		endif
	endfor
	select TableOfReal means
	nrows = Get number of rows
	if nrows > 1
		Remove row (index)... nrows
	endif
endproc

procedure All_means file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.means
	nrows = Get number of rows
	titleline$ = "Filename"
	maxf0line$ = name$
	minf0line$ = name$
	excursionsizeline$ = name$
	meanf0line$ = name$
	finalf0line$ = name$
	intensityline$ = name$
	durationline$ = name$
	maxvelocityline$ = name$
	finalvelocityline$ = name$
	for n from 1 to nrows
		if !hasmeanstitle
			rowname$ = Get row label... n
			titleline$ = "'titleline$'	'rowname$'"
		endif
		maxf0 = Get value... n 1
		maxf0line$ = "'maxf0line$'	'maxf0'"
		minf0 = Get value... n 2
		minf0line$ = "'minf0line$'	'minf0'"
		excursionsize = Get value... n 3
		excursionsizeline$ = "'excursionsizeline$'	'excursionsize'"
		meanf0 = Get value... n 4
		meanf0line$ = "'meanf0line$'	'meanf0'"
		finalf0 = Get value... n 5
		finalf0line$ = "'finalf0line$'	'finalf0'"
		intensity = Get value... n 6
		intensityline$ = "'intensityline$'	'intensity'"
		duration = Get value... n 7
		durationline$ = "'durationline$'	'duration'"
		maxvelocity = Get value... n 8
		maxvelocityline$ = "'maxvelocityline$'	'maxvelocity'"
		final_velocity = Get value... n 9
		finalvelocityline$ = "'finalvelocityline$'	'final_velocity'"
	endfor
	if !hasmeanstitle
		filedelete maxf0.txt
		filedelete minf0.txt
		filedelete excursionsize.txt
		filedelete meanf0.txt
		filedelete finalf0.txt
		filedelete meanintensity.txt
		filedelete duration.txt
		filedelete maxvelocity.txt
		filedelete finalvelocity.txt
		titleline$ = "'titleline$''newline$'"
		fileappend maxf0.txt 'titleline$'
		fileappend minf0.txt 'titleline$'
		fileappend excursionsize.txt 'titleline$'
		fileappend meanf0.txt 'titleline$'
		fileappend finalf0.txt 'titleline$'
		fileappend meanintensity.txt 'titleline$'
		fileappend duration.txt 'titleline$'
		fileappend maxvelocity.txt 'titleline$'
		fileappend finalvelocity.txt 'titleline$'
		hasmeanstitle = 1
	endif
	maxf0line$ = "'maxf0line$''newline$'"
	fileappend "maxf0.txt" 'maxf0line$'
	minf0line$ = "'minf0line$''newline$'"
	fileappend "minf0.txt" 'minf0line$'
	excursionsizeline$ = "'excursionsizeline$''newline$'"
	fileappend "excursionsize.txt" 'excursionsizeline$'
	meanf0line$ = "'meanf0line$''newline$'"
	fileappend "meanf0.txt" 'meanf0line$'
	finalf0line$ = "'finalf0line$''newline$'"
	fileappend "finalf0.txt" 'finalf0line$'
	intensityline$ = "'intensityline$''newline$'"
	fileappend "meanintensity.txt" 'intensityline$'
	durationline$ = "'durationline$''newline$'"
	fileappend "duration.txt" 'durationline$'
	maxvelocityline$ = "'maxvelocityline$''newline$'"
	fileappend "maxvelocity.txt" 'maxvelocityline$'
	finalvelocityline$ = "'finalvelocityline$''newline$'"
	fileappend "finalvelocity.txt" 'finalvelocityline$'
	Remove
endproc

procedure All_normf0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.timenormf0
	nrows = Get number of rows
	titleline$ = "Normtime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormf0
			normtime$ = Get value... n 1
			titleline$ = "'titleline$'	'normtime$'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasnormf0
		filedelete normf0.txt
		titleline$ = "'titleline$''newline$'"
		fileappend normf0.txt 'titleline$'
		hasnormf0 = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "normf0.txt" 'resultline$'
	Remove
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.actutimenormf0
	nrows = Get number of rows
	titleline$ = "Norm actual time"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormactutime
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 1
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasnormactutime
		filedelete normactutime.txt
		titleline$ = "'titleline$''newline$'"
		fileappend normactutime.txt 'titleline$'
		hasnormactutime = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "normactutime.txt" 'resultline$'
	Remove
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.timenormIntensity
	nrows = Get number of rows
	titleline$ = "Normtime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasnormIntensity
			titleline$ = "'titleline$'	'n'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasnormIntensity
		filedelete normIntensity.txt
		titleline$ = "'titleline$''newline$'"
		fileappend normIntensity.txt 'titleline$'
		hasnormIntensity = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "normIntensity.txt" 'resultline$'
	Remove
endproc

procedure All_samplef0 file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.samplef0
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hassamplef0
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hassamplef0
		filedelete samplef0.txt
		titleline$ = "'titleline$''newline$'"
		fileappend samplef0.txt 'titleline$'
		hassamplef0 = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "samplef0.txt" 'resultline$'
	Remove
endproc

procedure All_f0velocity file_name$
	Read TableOfReal from headerless spreadsheet file... 'directory$''name$'.f0velocity
	nrows = Get number of rows
	titleline$ = "Sampletime"
	resultline$ = "_"+name$
	for n from 1 to nrows
		if !hasf0velocity
			sampletime = Get value... n 1
			if n == 1
				onsettime = sampletime
			endif
			sampletime = sampletime - onsettime
			titleline$ = "'titleline$'	'sampletime'"
		endif
		value = Get value... n 2
		resultline$ = "'resultline$'	'value'"
	endfor
	if !hasf0velocity
		filedelete f0velocity.txt
		titleline$ = "'titleline$''newline$'"
		fileappend f0velocity.txt 'titleline$'
		hasf0velocity = 1
	endif
	resultline$ = "'resultline$''newline$'"
	fileappend "f0velocity.txt" 'resultline$'
	Remove
endproc

procedure Smooth curve_in$ curve_out$ width
	Create PitchTier... 'curve_out$' sampleStart sampleEnd
	
	for j from 1 to width							; make a triangular window of size = width 
		if j < width / 2 + 0.5
			weight'j' = j
		else 
			weight'j' = width - j + 1
		endif
	endfor

	select PitchTier 'curve_in$'
	smooth_end = Get number of points

	for i from 1 to width / 2						; smooth initial points: 0 to width/2 - 1 
	    n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
	    for j from 1 to width/2 + i					; window size = width/2 to width - 1
	    	j = 'j:0'
	    	rawsample = Get value at index... j
	    	index = width / 2 + j - i
	    	index = 'index:0'
			smoothsample += weight'index' * rawsample
			n += weight'index'
	    endfor
		smoothsample /= n
		select PitchTier 'curve_out$'
		Add point... sample_time smoothsample
	endfor
	
	for i from width/2 to smooth_end - width/2				; smooth from width/2 to end-width/2
		n = 0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... i
		for j from 1 to width
	    	rawsample = Get value at index... i-width/2+j
			smoothsample += weight'j' * rawsample
			n += weight'j'
		endfor
		smoothsample /= n
		select PitchTier 'curve_out$'
		Add point... sample_time smoothsample
	endfor
	
	i = width/2
	while i > 0										; smooth final points: end - width/2 to end
		n = 0.0
		smoothsample = 0.0
		select PitchTier 'curve_in$'
		sample_time = Get time from index... smooth_end-i
		j = width/2 + i
		j = 'j:0'
		while j > 1									; window size = width - 1 to width/2 
	    	rawsample = Get value at index... smooth_end-j
	    	index = width/2+i-j + 1
	    	index = 'index:0'
			smoothsample += weight'index' * rawsample
			n += weight'index'
			j -= 1
		endwhile
		smoothsample /= n
		select PitchTier 'curve_out$'
		Add point... sample_time smoothsample
		i -= 1
	endwhile
endproc
